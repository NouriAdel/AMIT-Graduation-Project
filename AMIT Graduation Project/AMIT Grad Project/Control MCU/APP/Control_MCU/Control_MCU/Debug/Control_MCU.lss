
Control_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000216  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d78  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c0  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000093c  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  0000231c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000500  00000000  00000000  0000249c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b03  00000000  00000000  0000299c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000349f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#define F_CPU 16000000UL
#include "util/delay.h"


int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	1f 92       	push	r1
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	/*A variable used for storing data sent from Bluetooth*/
	u8_t recv_var = 0;
  86:	19 82       	std	Y+1, r1	; 0x01
	
	/*Initialize UART*/
	muart_init(MUART_9600_BPS);
  88:	87 e6       	ldi	r24, 0x67	; 103
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <muart_init>
	
	/*Initialize SPI*/
	mspi_init(MSPI_SAMPLE_R_SETUP_F, MSPI_PRE_32);
  90:	64 e0       	ldi	r22, 0x04	; 4
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 c6 00 	call	0x18c	; 0x18c <mspi_init>
    /* Replace with your application code */
    while (1) 
    {
		
		/*Send data from Bluetooth to Control MCU via UART*/
		muart_recvByte(&recv_var);
  98:	ce 01       	movw	r24, r28
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	0e 94 03 01 	call	0x206	; 0x206 <muart_recvByte>
		
		/*Send data from Control MCU to Actuator MCU via SPI*/
		mspi_sendRecvByte(recv_var);
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <mspi_sendRecvByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	83 ed       	ldi	r24, 0xD3	; 211
  aa:	90 e3       	ldi	r25, 0x30	; 48
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x30>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x3a>
  b6:	00 00       	nop
  b8:	ef cf       	rjmp	.-34     	; 0x98 <main+0x1c>

000000ba <mdio_pinStatus>:

/*This function is responsible for setting pin or pins for a dedicated port*/
void mdio_pinStatus(u8_t port, u8_t pin, u8_t pin_status) /*pin: PIN0, PIN2 | PIN3, PIN1 | PIN5 | PIN4 | PIN3*/ /*0b00111010*/
{
	/*Switching over DIO ports*/
	switch(port)
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	f9 f0       	breq	.+62     	; 0xfc <mdio_pinStatus+0x42>
  be:	30 f0       	brcs	.+12     	; 0xcc <mdio_pinStatus+0x12>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	a1 f1       	breq	.+104    	; 0x12c <mdio_pinStatus+0x72>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	09 f4       	brne	.+2      	; 0xca <mdio_pinStatus+0x10>
  c8:	49 c0       	rjmp	.+146    	; 0x15c <mdio_pinStatus+0xa2>
  ca:	08 95       	ret
	{
		/*In case of PORTA*/
		case PORTA:
			/*Switching over pin status*/
			switch(pin_status)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	41 f0       	breq	.+16     	; 0xe0 <mdio_pinStatus+0x26>
  d0:	18 f0       	brcs	.+6      	; 0xd8 <mdio_pinStatus+0x1e>
  d2:	42 30       	cpi	r20, 0x02	; 2
  d4:	51 f0       	breq	.+20     	; 0xea <mdio_pinStatus+0x30>
  d6:	08 95       	ret
			{
				/*In case of output status*/
				case OUTPUT:
					/*Setting dedicated pins in DDR register*/
					MDIO_DDRA |= pin; /*DDRA = 0b01000010, 0b01111010*/
  d8:	8a b3       	in	r24, 0x1a	; 26
  da:	68 2b       	or	r22, r24
  dc:	6a bb       	out	0x1a, r22	; 26
					//SET_BIT(DDRA, pin);
					break;
  de:	08 95       	ret
					
				/*In case of input status*/
				case INPUT_FLOAT:
				/*Clearing dedicated pins in DDR register*/
					MDIO_DDRA &= ~pin; /*DDRA = 0b11111111*/
  e0:	8a b3       	in	r24, 0x1a	; 26
  e2:	60 95       	com	r22
  e4:	68 23       	and	r22, r24
  e6:	6a bb       	out	0x1a, r22	; 26
					break;
  e8:	08 95       	ret
					
				/*In case of input pull-up status*/
				case INPUT_PULLUP:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRA &= ~pin;
  ea:	8a b3       	in	r24, 0x1a	; 26
  ec:	96 2f       	mov	r25, r22
  ee:	90 95       	com	r25
  f0:	89 23       	and	r24, r25
  f2:	8a bb       	out	0x1a, r24	; 26
					/*Setting dedicated pins in DDR register*/
					MDIO_PORTA |= pin;
  f4:	8b b3       	in	r24, 0x1b	; 27
  f6:	68 2b       	or	r22, r24
  f8:	6b bb       	out	0x1b, r22	; 27
					break;
  fa:	08 95       	ret
			break;
			
		/*In case of PORTB*/
		case PORTB:
			/*Switching over pin status*/
			switch(pin_status)
  fc:	41 30       	cpi	r20, 0x01	; 1
  fe:	41 f0       	breq	.+16     	; 0x110 <mdio_pinStatus+0x56>
 100:	18 f0       	brcs	.+6      	; 0x108 <mdio_pinStatus+0x4e>
 102:	42 30       	cpi	r20, 0x02	; 2
 104:	51 f0       	breq	.+20     	; 0x11a <mdio_pinStatus+0x60>
 106:	08 95       	ret
			{
				/*In case of output status*/
				case OUTPUT:
					/*Setting dedicated pins in DDR register*/
					MDIO_DDRB |= pin; /*DDRA = 0b01000010, 0b01111010*/
 108:	87 b3       	in	r24, 0x17	; 23
 10a:	68 2b       	or	r22, r24
 10c:	67 bb       	out	0x17, r22	; 23
					//SET_BIT(DDRA, pin);
					break;
 10e:	08 95       	ret
					
				/*In case of input status*/
				case INPUT_FLOAT:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRB &= ~pin; /*DDRA = 0b11111111*/
 110:	87 b3       	in	r24, 0x17	; 23
 112:	60 95       	com	r22
 114:	68 23       	and	r22, r24
 116:	67 bb       	out	0x17, r22	; 23
					break;
 118:	08 95       	ret
					
				/*In case of input pull-up status*/
				case INPUT_PULLUP:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRB &= ~pin;
 11a:	87 b3       	in	r24, 0x17	; 23
 11c:	96 2f       	mov	r25, r22
 11e:	90 95       	com	r25
 120:	89 23       	and	r24, r25
 122:	87 bb       	out	0x17, r24	; 23
					/*Setting dedicated pins in DDR register*/
					MDIO_PORTB |= pin;
 124:	88 b3       	in	r24, 0x18	; 24
 126:	68 2b       	or	r22, r24
 128:	68 bb       	out	0x18, r22	; 24
					break;
 12a:	08 95       	ret
			break;
			
		/*In case of PORTC*/
		case PORTC:
			/*Switching over pin status*/
			switch(pin_status)
 12c:	41 30       	cpi	r20, 0x01	; 1
 12e:	41 f0       	breq	.+16     	; 0x140 <mdio_pinStatus+0x86>
 130:	18 f0       	brcs	.+6      	; 0x138 <mdio_pinStatus+0x7e>
 132:	42 30       	cpi	r20, 0x02	; 2
 134:	51 f0       	breq	.+20     	; 0x14a <mdio_pinStatus+0x90>
 136:	08 95       	ret
			{
				/*In case of output status*/
				case OUTPUT:
					/*Setting dedicated pins in DDR register*/
					MDIO_DDRC |= pin; /*DDRA = 0b01000010, 0b01111010*/
 138:	84 b3       	in	r24, 0x14	; 20
 13a:	68 2b       	or	r22, r24
 13c:	64 bb       	out	0x14, r22	; 20
					//SET_BIT(DDRA, pin);
					break;
 13e:	08 95       	ret
					
				/*In case of input status*/
				case INPUT_FLOAT:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRC &= ~pin; /*DDRA = 0b11111111*/
 140:	84 b3       	in	r24, 0x14	; 20
 142:	60 95       	com	r22
 144:	68 23       	and	r22, r24
 146:	64 bb       	out	0x14, r22	; 20
					break;
 148:	08 95       	ret
					
				/*In case of input pull-up status*/
				case INPUT_PULLUP:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRC &= ~pin;
 14a:	84 b3       	in	r24, 0x14	; 20
 14c:	96 2f       	mov	r25, r22
 14e:	90 95       	com	r25
 150:	89 23       	and	r24, r25
 152:	84 bb       	out	0x14, r24	; 20
					/*Setting dedicated pins in DDR register*/
					MDIO_PORTC |= pin;
 154:	85 b3       	in	r24, 0x15	; 21
 156:	68 2b       	or	r22, r24
 158:	65 bb       	out	0x15, r22	; 21
					break;
 15a:	08 95       	ret
			break;
			
		/*In case of PORTD*/
		case PORTD:
			/*Switching over pin status*/
			switch(pin_status)
 15c:	41 30       	cpi	r20, 0x01	; 1
 15e:	41 f0       	breq	.+16     	; 0x170 <mdio_pinStatus+0xb6>
 160:	18 f0       	brcs	.+6      	; 0x168 <mdio_pinStatus+0xae>
 162:	42 30       	cpi	r20, 0x02	; 2
 164:	51 f0       	breq	.+20     	; 0x17a <mdio_pinStatus+0xc0>
 166:	08 95       	ret
			{
				/*In case of output status*/
				case OUTPUT:
					/*Setting dedicated pins in DDR register*/
					MDIO_DDRD |= pin; /*DDRA = 0b01000010, 0b01111010*/
 168:	81 b3       	in	r24, 0x11	; 17
 16a:	68 2b       	or	r22, r24
 16c:	61 bb       	out	0x11, r22	; 17
					//SET_BIT(DDRA, pin);
					break;
 16e:	08 95       	ret
					
				/*In case of input status*/
				case INPUT_FLOAT:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRD &= ~pin; /*DDRA = 0b11111111*/
 170:	81 b3       	in	r24, 0x11	; 17
 172:	60 95       	com	r22
 174:	68 23       	and	r22, r24
 176:	61 bb       	out	0x11, r22	; 17
					break;
 178:	08 95       	ret
					
				/*In case of input pull-up status*/
				case INPUT_PULLUP:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRD &= ~pin;
 17a:	81 b3       	in	r24, 0x11	; 17
 17c:	96 2f       	mov	r25, r22
 17e:	90 95       	com	r25
 180:	89 23       	and	r24, r25
 182:	81 bb       	out	0x11, r24	; 17
					/*Setting dedicated pins in DDR register*/
					MDIO_PORTD |= pin;
 184:	82 b3       	in	r24, 0x12	; 18
 186:	68 2b       	or	r22, r24
 188:	62 bb       	out	0x12, r22	; 18
 18a:	08 95       	ret

0000018c <mspi_init>:
	/*Set SPI clock*/
	MSPI_SPCR |= (clk_prescaler / 2);
	
	/*Return from this function*/
	return;
}
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	c8 2f       	mov	r28, r24
 192:	d6 2f       	mov	r29, r22
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	60 e1       	ldi	r22, 0x10	; 16
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 5d 00 	call	0xba	; 0xba <mdio_pinStatus>
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	60 e2       	ldi	r22, 0x20	; 32
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 5d 00 	call	0xba	; 0xba <mdio_pinStatus>
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	60 e4       	ldi	r22, 0x40	; 64
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 5d 00 	call	0xba	; 0xba <mdio_pinStatus>
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	60 e8       	ldi	r22, 0x80	; 128
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 5d 00 	call	0xba	; 0xba <mdio_pinStatus>
 1bc:	cc 0f       	add	r28, r28
 1be:	cc 0f       	add	r28, r28
 1c0:	c0 61       	ori	r28, 0x10	; 16
 1c2:	cd b9       	out	0x0d, r28	; 13
 1c4:	d0 ff       	sbrs	r29, 0
 1c6:	70 9a       	sbi	0x0e, 0	; 14
 1c8:	8d b1       	in	r24, 0x0d	; 13
 1ca:	d6 95       	lsr	r29
 1cc:	d8 2b       	or	r29, r24
 1ce:	dd b9       	out	0x0d, r29	; 13
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <mspi_sendRecvByte>:
{
	/*Variable used in timing out operations*/
	u16_t timeout_var = 0;
	
	/*Enable SPI peripheral*/
	SET_BIT(MSPI_SPCR, 6);
 1d6:	6e 9a       	sbi	0x0d, 6	; 13
	
	/*Send master data*/
	MSPI_SPDR = data;
 1d8:	8f b9       	out	0x0f, r24	; 15
	
	/*Wait until data is transmitted or timeout in 10ms*/
	while( (GET_BIT(MSPI_SPSR, 7) == 0) && timeout_var < 10000)
 1da:	77 99       	sbic	0x0e, 7	; 14
 1dc:	0a c0       	rjmp	.+20     	; 0x1f2 <mspi_sendRecvByte+0x1c>
 1de:	80 e1       	ldi	r24, 0x10	; 16
 1e0:	97 e2       	ldi	r25, 0x27	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	25 e0       	ldi	r18, 0x05	; 5
 1e4:	2a 95       	dec	r18
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <mspi_sendRecvByte+0xe>
 1e8:	00 00       	nop
 1ea:	77 99       	sbic	0x0e, 7	; 14
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <mspi_sendRecvByte+0x1c>
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	c1 f7       	brne	.-16     	; 0x1e2 <mspi_sendRecvByte+0xc>
		/*Delay for 1us*/
		_delay_us(1);
	}
	
	/*Disable SPI peripheral*/
	CLEAR_BIT(MSPI_SPCR, 6);
 1f2:	6e 98       	cbi	0x0d, 6	; 13
	
	/*Return SPI slave data*/
	return MSPI_SPDR;
 1f4:	8f b1       	in	r24, 0x0f	; 15
}
 1f6:	08 95       	ret

000001f8 <muart_init>:
			/*Dealy for 1ms*/
			_delay_ms(1);
		}
		
		/*Clearing Tx flag*/
		SET_BIT(MUART_UCSRA, 6);
 1f8:	54 9a       	sbi	0x0a, 4	; 10
 1fa:	53 9a       	sbi	0x0a, 3	; 10
 1fc:	26 e8       	ldi	r18, 0x86	; 134
 1fe:	20 bd       	out	0x20, r18	; 32
 200:	89 b9       	out	0x09, r24	; 9
 202:	90 bd       	out	0x20, r25	; 32
 204:	08 95       	ret

00000206 <muart_recvByte>:

/*This function is responsible for*/
void muart_recvByte(u8_t* data)
{
	/*Checking that there is a new data or not*/
	if(GET_BIT(MUART_UCSRA, 7))
 206:	5f 9b       	sbis	0x0b, 7	; 11
 208:	03 c0       	rjmp	.+6      	; 0x210 <muart_recvByte+0xa>
	{
		/*Reading the new data*/
		*data = MUART_UDR;
 20a:	2c b1       	in	r18, 0x0c	; 12
 20c:	fc 01       	movw	r30, r24
 20e:	20 83       	st	Z, r18
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
