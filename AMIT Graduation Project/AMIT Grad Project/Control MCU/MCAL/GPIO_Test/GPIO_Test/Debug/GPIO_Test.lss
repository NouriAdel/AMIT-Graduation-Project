
GPIO_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000282  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a15  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fd  00000000  00000000  00000de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057f  00000000  00000000  000014de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001a60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fd  00000000  00000000  00001b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000791  00000000  00000000  00001f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000026aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  64:	0c 94 3f 01 	jmp	0x27e	; 0x27e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <hled_init>:
/************************************************************************/

/*This function is responsible for initializing a chosen LED as OUTPUT*/
void hled_init(u8_t led_number)
{
	switch(led_number)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	51 f0       	breq	.+20     	; 0x84 <hled_init+0x18>
  70:	18 f0       	brcs	.+6      	; 0x78 <hled_init+0xc>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	69 f0       	breq	.+26     	; 0x90 <hled_init+0x24>
  76:	08 95       	ret
	{
		case LED0:
			mdio_pinStatus(LED0_PORT,LED0_PIN,OUTPUT);
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	64 e0       	ldi	r22, 0x04	; 4
  7c:	82 e0       	ldi	r24, 0x02	; 2
  7e:	0e 94 9a 00 	call	0x134	; 0x134 <mdio_pinStatus>
			break;
  82:	08 95       	ret
			
		case LED1:
			mdio_pinStatus(LED1_PORT,LED1_PIN,OUTPUT);
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	60 e8       	ldi	r22, 0x80	; 128
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	0e 94 9a 00 	call	0x134	; 0x134 <mdio_pinStatus>
			break;
  8e:	08 95       	ret
			
		case LED2:
			mdio_pinStatus(LED2_PORT,LED2_PIN,OUTPUT);
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	68 e0       	ldi	r22, 0x08	; 8
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	0e 94 9a 00 	call	0x134	; 0x134 <mdio_pinStatus>
  9a:	08 95       	ret

0000009c <hled_ledON>:
}

/*This function is responsible for setting the chosen LED to ON mode*/
void hled_ledON(u8_t led_number)
{
	switch(led_number)
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	51 f0       	breq	.+20     	; 0xb4 <hled_ledON+0x18>
  a0:	18 f0       	brcs	.+6      	; 0xa8 <hled_ledON+0xc>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	69 f0       	breq	.+26     	; 0xc0 <hled_ledON+0x24>
  a6:	08 95       	ret
	{
		case LED0:
		mdio_setPinValue(LED0_PORT,LED0_PIN,HIGH);
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	64 e0       	ldi	r22, 0x04	; 4
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	0e 94 03 01 	call	0x206	; 0x206 <mdio_setPinValue>
		break;
  b2:	08 95       	ret
		
		case LED1:
		mdio_setPinValue(LED1_PORT,LED1_PIN,HIGH);
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	60 e8       	ldi	r22, 0x80	; 128
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 03 01 	call	0x206	; 0x206 <mdio_setPinValue>
		break;
  be:	08 95       	ret
		
		case LED2:
		mdio_setPinValue(LED2_PORT,LED2_PIN,HIGH);
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	68 e0       	ldi	r22, 0x08	; 8
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 03 01 	call	0x206	; 0x206 <mdio_setPinValue>
  ca:	08 95       	ret

000000cc <hled_ledOFF>:
}

/*This function is responsible for setting the chosen LED to OFF mode*/
void hled_ledOFF(u8_t led_number)
{
	switch(led_number)
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	51 f0       	breq	.+20     	; 0xe4 <hled_ledOFF+0x18>
  d0:	18 f0       	brcs	.+6      	; 0xd8 <hled_ledOFF+0xc>
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	69 f0       	breq	.+26     	; 0xf0 <hled_ledOFF+0x24>
  d6:	08 95       	ret
	{
		case LED0:
		mdio_setPinValue(LED0_PORT,LED0_PIN,LOW);
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	64 e0       	ldi	r22, 0x04	; 4
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	0e 94 03 01 	call	0x206	; 0x206 <mdio_setPinValue>
		break;
  e2:	08 95       	ret
		
		case LED1:
		mdio_setPinValue(LED1_PORT,LED1_PIN,LOW);
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	60 e8       	ldi	r22, 0x80	; 128
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 03 01 	call	0x206	; 0x206 <mdio_setPinValue>
		break;
  ee:	08 95       	ret
		
		case LED2:
		mdio_setPinValue(LED2_PORT,LED2_PIN,LOW);
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	68 e0       	ldi	r22, 0x08	; 8
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	0e 94 03 01 	call	0x206	; 0x206 <mdio_setPinValue>
  fa:	08 95       	ret

000000fc <main>:
	
	mdio_pinStatus(PORTB, BUTT0 | BUTT1, INPUT_FLOAT);
	mdio_pinStatus(PORTD, BUTT2, INPUT_FLOAT);
	*/
	
	hled_init(LED0);
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 36 00 	call	0x6c	; 0x6c <hled_init>
		}*/
		
		//mdio_togglePinValue(PORTC, LED0);
		//_delay_ms(1000);
		
		hled_ledON(LED0);
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 4e 00 	call	0x9c	; 0x9c <hled_ledON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	83 ed       	ldi	r24, 0xD3	; 211
 10c:	90 e3       	ldi	r25, 0x30	; 48
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x12>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x1c>
 118:	00 00       	nop
		_delay_ms(1000);
		hled_ledOFF(LED0);
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 66 00 	call	0xcc	; 0xcc <hled_ledOFF>
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	83 ed       	ldi	r24, 0xD3	; 211
 124:	90 e3       	ldi	r25, 0x30	; 48
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x2a>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x34>
 130:	00 00       	nop
 132:	e7 cf       	rjmp	.-50     	; 0x102 <main+0x6>

00000134 <mdio_pinStatus>:

/*This function is responsible for setting pin or pins for a dedicated port*/
void mdio_pinStatus(u8_t port, u8_t pin, u8_t pin_status) /*pin: PIN0, PIN2 | PIN3, PIN1 | PIN5 | PIN4 | PIN3*/ /*0b00111010*/
{
	/*Switching over DIO ports*/
	switch(port)
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	f9 f0       	breq	.+62     	; 0x176 <mdio_pinStatus+0x42>
 138:	30 f0       	brcs	.+12     	; 0x146 <mdio_pinStatus+0x12>
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	a1 f1       	breq	.+104    	; 0x1a6 <mdio_pinStatus+0x72>
 13e:	83 30       	cpi	r24, 0x03	; 3
 140:	09 f4       	brne	.+2      	; 0x144 <mdio_pinStatus+0x10>
 142:	49 c0       	rjmp	.+146    	; 0x1d6 <mdio_pinStatus+0xa2>
 144:	08 95       	ret
	{
		/*In case of PORTA*/
		case PORTA:
			/*Switching over pin status*/
			switch(pin_status)
 146:	41 30       	cpi	r20, 0x01	; 1
 148:	41 f0       	breq	.+16     	; 0x15a <mdio_pinStatus+0x26>
 14a:	18 f0       	brcs	.+6      	; 0x152 <mdio_pinStatus+0x1e>
 14c:	42 30       	cpi	r20, 0x02	; 2
 14e:	51 f0       	breq	.+20     	; 0x164 <mdio_pinStatus+0x30>
 150:	08 95       	ret
			{
				/*In case of output status*/
				case OUTPUT:
					/*Setting dedicated pins in DDR register*/
					MDIO_DDRA |= pin; /*DDRA = 0b01000010, 0b01111010*/
 152:	8a b3       	in	r24, 0x1a	; 26
 154:	68 2b       	or	r22, r24
 156:	6a bb       	out	0x1a, r22	; 26
					//SET_BIT(DDRA, pin);
					break;
 158:	08 95       	ret
					
				/*In case of input status*/
				case INPUT_FLOAT:
				/*Clearing dedicated pins in DDR register*/
					MDIO_DDRA &= ~pin; /*DDRA = 0b11111111*/
 15a:	8a b3       	in	r24, 0x1a	; 26
 15c:	60 95       	com	r22
 15e:	68 23       	and	r22, r24
 160:	6a bb       	out	0x1a, r22	; 26
					break;
 162:	08 95       	ret
					
				/*In case of input pull-up status*/
				case INPUT_PULLUP:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRA &= ~pin;
 164:	8a b3       	in	r24, 0x1a	; 26
 166:	96 2f       	mov	r25, r22
 168:	90 95       	com	r25
 16a:	89 23       	and	r24, r25
 16c:	8a bb       	out	0x1a, r24	; 26
					/*Setting dedicated pins in DDR register*/
					MDIO_PORTA |= pin;
 16e:	8b b3       	in	r24, 0x1b	; 27
 170:	68 2b       	or	r22, r24
 172:	6b bb       	out	0x1b, r22	; 27
					break;
 174:	08 95       	ret
			break;
			
		/*In case of PORTB*/
		case PORTB:
			/*Switching over pin status*/
			switch(pin_status)
 176:	41 30       	cpi	r20, 0x01	; 1
 178:	41 f0       	breq	.+16     	; 0x18a <mdio_pinStatus+0x56>
 17a:	18 f0       	brcs	.+6      	; 0x182 <mdio_pinStatus+0x4e>
 17c:	42 30       	cpi	r20, 0x02	; 2
 17e:	51 f0       	breq	.+20     	; 0x194 <mdio_pinStatus+0x60>
 180:	08 95       	ret
			{
				/*In case of output status*/
				case OUTPUT:
					/*Setting dedicated pins in DDR register*/
					MDIO_DDRB |= pin; /*DDRA = 0b01000010, 0b01111010*/
 182:	87 b3       	in	r24, 0x17	; 23
 184:	68 2b       	or	r22, r24
 186:	67 bb       	out	0x17, r22	; 23
					//SET_BIT(DDRA, pin);
					break;
 188:	08 95       	ret
					
				/*In case of input status*/
				case INPUT_FLOAT:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRB &= ~pin; /*DDRA = 0b11111111*/
 18a:	87 b3       	in	r24, 0x17	; 23
 18c:	60 95       	com	r22
 18e:	68 23       	and	r22, r24
 190:	67 bb       	out	0x17, r22	; 23
					break;
 192:	08 95       	ret
					
				/*In case of input pull-up status*/
				case INPUT_PULLUP:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRB &= ~pin;
 194:	87 b3       	in	r24, 0x17	; 23
 196:	96 2f       	mov	r25, r22
 198:	90 95       	com	r25
 19a:	89 23       	and	r24, r25
 19c:	87 bb       	out	0x17, r24	; 23
					/*Setting dedicated pins in DDR register*/
					MDIO_PORTB |= pin;
 19e:	88 b3       	in	r24, 0x18	; 24
 1a0:	68 2b       	or	r22, r24
 1a2:	68 bb       	out	0x18, r22	; 24
					break;
 1a4:	08 95       	ret
			break;
			
		/*In case of PORTC*/
		case PORTC:
			/*Switching over pin status*/
			switch(pin_status)
 1a6:	41 30       	cpi	r20, 0x01	; 1
 1a8:	41 f0       	breq	.+16     	; 0x1ba <mdio_pinStatus+0x86>
 1aa:	18 f0       	brcs	.+6      	; 0x1b2 <mdio_pinStatus+0x7e>
 1ac:	42 30       	cpi	r20, 0x02	; 2
 1ae:	51 f0       	breq	.+20     	; 0x1c4 <mdio_pinStatus+0x90>
 1b0:	08 95       	ret
			{
				/*In case of output status*/
				case OUTPUT:
					/*Setting dedicated pins in DDR register*/
					MDIO_DDRC |= pin; /*DDRA = 0b01000010, 0b01111010*/
 1b2:	84 b3       	in	r24, 0x14	; 20
 1b4:	68 2b       	or	r22, r24
 1b6:	64 bb       	out	0x14, r22	; 20
					//SET_BIT(DDRA, pin);
					break;
 1b8:	08 95       	ret
					
				/*In case of input status*/
				case INPUT_FLOAT:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRC &= ~pin; /*DDRA = 0b11111111*/
 1ba:	84 b3       	in	r24, 0x14	; 20
 1bc:	60 95       	com	r22
 1be:	68 23       	and	r22, r24
 1c0:	64 bb       	out	0x14, r22	; 20
					break;
 1c2:	08 95       	ret
					
				/*In case of input pull-up status*/
				case INPUT_PULLUP:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRC &= ~pin;
 1c4:	84 b3       	in	r24, 0x14	; 20
 1c6:	96 2f       	mov	r25, r22
 1c8:	90 95       	com	r25
 1ca:	89 23       	and	r24, r25
 1cc:	84 bb       	out	0x14, r24	; 20
					/*Setting dedicated pins in DDR register*/
					MDIO_PORTC |= pin;
 1ce:	85 b3       	in	r24, 0x15	; 21
 1d0:	68 2b       	or	r22, r24
 1d2:	65 bb       	out	0x15, r22	; 21
					break;
 1d4:	08 95       	ret
			break;
			
		/*In case of PORTD*/
		case PORTD:
			/*Switching over pin status*/
			switch(pin_status)
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	41 f0       	breq	.+16     	; 0x1ea <mdio_pinStatus+0xb6>
 1da:	18 f0       	brcs	.+6      	; 0x1e2 <mdio_pinStatus+0xae>
 1dc:	42 30       	cpi	r20, 0x02	; 2
 1de:	51 f0       	breq	.+20     	; 0x1f4 <mdio_pinStatus+0xc0>
 1e0:	08 95       	ret
			{
				/*In case of output status*/
				case OUTPUT:
					/*Setting dedicated pins in DDR register*/
					MDIO_DDRD |= pin; /*DDRA = 0b01000010, 0b01111010*/
 1e2:	81 b3       	in	r24, 0x11	; 17
 1e4:	68 2b       	or	r22, r24
 1e6:	61 bb       	out	0x11, r22	; 17
					//SET_BIT(DDRA, pin);
					break;
 1e8:	08 95       	ret
					
				/*In case of input status*/
				case INPUT_FLOAT:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRD &= ~pin; /*DDRA = 0b11111111*/
 1ea:	81 b3       	in	r24, 0x11	; 17
 1ec:	60 95       	com	r22
 1ee:	68 23       	and	r22, r24
 1f0:	61 bb       	out	0x11, r22	; 17
					break;
 1f2:	08 95       	ret
					
				/*In case of input pull-up status*/
				case INPUT_PULLUP:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRD &= ~pin;
 1f4:	81 b3       	in	r24, 0x11	; 17
 1f6:	96 2f       	mov	r25, r22
 1f8:	90 95       	com	r25
 1fa:	89 23       	and	r24, r25
 1fc:	81 bb       	out	0x11, r24	; 17
					/*Setting dedicated pins in DDR register*/
					MDIO_PORTD |= pin;
 1fe:	82 b3       	in	r24, 0x12	; 18
 200:	68 2b       	or	r22, r24
 202:	62 bb       	out	0x12, r22	; 18
 204:	08 95       	ret

00000206 <mdio_setPinValue>:

/*This function is responsible for setting a dedicated value for a pin or pins*/
void mdio_setPinValue(u8_t port, u8_t pin, u8_t pin_value)
{
	/*Switching over DIO ports*/
	switch(port)
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	99 f0       	breq	.+38     	; 0x230 <mdio_setPinValue+0x2a>
 20a:	28 f0       	brcs	.+10     	; 0x216 <mdio_setPinValue+0x10>
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	e9 f0       	breq	.+58     	; 0x24a <mdio_setPinValue+0x44>
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	41 f1       	breq	.+80     	; 0x264 <mdio_setPinValue+0x5e>
 214:	08 95       	ret
	{
		/*In case of PORTA*/
		case PORTA:
			/*Switching over pin value*/
			switch(pin_value)
 216:	44 23       	and	r20, r20
 218:	31 f0       	breq	.+12     	; 0x226 <mdio_setPinValue+0x20>
 21a:	41 30       	cpi	r20, 0x01	; 1
 21c:	79 f5       	brne	.+94     	; 0x27c <mdio_setPinValue+0x76>
			{
				/*In case of HIGH value*/
				case HIGH:
					/*Setting dedicated pins in PORT register*/
					MDIO_PORTA |= pin; 
 21e:	8b b3       	in	r24, 0x1b	; 27
 220:	68 2b       	or	r22, r24
 222:	6b bb       	out	0x1b, r22	; 27
					break;
 224:	08 95       	ret
					
				/*In case of LOW value*/
				case LOW:
					/*Clearing dedicated pins in PORT register*/
					MDIO_PORTA &= ~pin; 
 226:	8b b3       	in	r24, 0x1b	; 27
 228:	60 95       	com	r22
 22a:	68 23       	and	r22, r24
 22c:	6b bb       	out	0x1b, r22	; 27
					break;
 22e:	08 95       	ret
			break;
			
		/*In case of PORTB*/
		case PORTB:
			/*Switching over pin value*/
			switch(pin_value)
 230:	44 23       	and	r20, r20
 232:	31 f0       	breq	.+12     	; 0x240 <mdio_setPinValue+0x3a>
 234:	41 30       	cpi	r20, 0x01	; 1
 236:	11 f5       	brne	.+68     	; 0x27c <mdio_setPinValue+0x76>
			{
				/*In case of HIGH value*/
				case HIGH:
					/*Setting dedicated pins in PORT register*/
					MDIO_PORTB |= pin; 
 238:	88 b3       	in	r24, 0x18	; 24
 23a:	68 2b       	or	r22, r24
 23c:	68 bb       	out	0x18, r22	; 24
					break;
 23e:	08 95       	ret
					
				/*In case of LOW value*/
				case LOW:
					/*Clearing dedicated pins in PORT register*/
					MDIO_PORTB &= ~pin; 
 240:	88 b3       	in	r24, 0x18	; 24
 242:	60 95       	com	r22
 244:	68 23       	and	r22, r24
 246:	68 bb       	out	0x18, r22	; 24
					break;
 248:	08 95       	ret
			break;
			
		/*In case of PORTC*/
		case PORTC:
			/*Switching over pin value*/
			switch(pin_value)
 24a:	44 23       	and	r20, r20
 24c:	31 f0       	breq	.+12     	; 0x25a <mdio_setPinValue+0x54>
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	a9 f4       	brne	.+42     	; 0x27c <mdio_setPinValue+0x76>
			{
				/*In case of HIGH value*/
				case HIGH:
					/*Setting dedicated pins in PORT register*/
					MDIO_PORTC |= pin; 
 252:	85 b3       	in	r24, 0x15	; 21
 254:	68 2b       	or	r22, r24
 256:	65 bb       	out	0x15, r22	; 21
					break;
 258:	08 95       	ret
					
				/*In case of LOW value*/
				case LOW:
					/*Clearing dedicated pins in PORT register*/
					MDIO_PORTC &= ~pin; 
 25a:	85 b3       	in	r24, 0x15	; 21
 25c:	60 95       	com	r22
 25e:	68 23       	and	r22, r24
 260:	65 bb       	out	0x15, r22	; 21
					break;
 262:	08 95       	ret
			break;
			
		/*In case of PORTD*/
		case PORTD:
			/*Switching over pin value*/
			switch(pin_value)
 264:	44 23       	and	r20, r20
 266:	31 f0       	breq	.+12     	; 0x274 <mdio_setPinValue+0x6e>
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	41 f4       	brne	.+16     	; 0x27c <mdio_setPinValue+0x76>
			{
				/*In case of HIGH value*/
				case HIGH:
					/*Setting dedicated pins in PORT register*/
					MDIO_PORTD |= pin; 
 26c:	82 b3       	in	r24, 0x12	; 18
 26e:	68 2b       	or	r22, r24
 270:	62 bb       	out	0x12, r22	; 18
					break;
 272:	08 95       	ret
					
				/*In case of LOW value*/
				case LOW:
				/*Clearing dedicated pins in PORT register*/
					MDIO_PORTD &= ~pin; 
 274:	82 b3       	in	r24, 0x12	; 18
 276:	60 95       	com	r22
 278:	68 23       	and	r22, r24
 27a:	62 bb       	out	0x12, r22	; 18
 27c:	08 95       	ret

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
