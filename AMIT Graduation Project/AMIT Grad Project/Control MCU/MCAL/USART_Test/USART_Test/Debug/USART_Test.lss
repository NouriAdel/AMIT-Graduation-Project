
USART_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000230  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000230  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800068  00800068  000002cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a68  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077a  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000690  00000000  00000000  000015aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044d  00000000  00000000  00001d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007fd  00000000  00000000  00002169  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002966  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 16 01 	jmp	0x22c	; 0x22c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int main(void)
{
	u8_t recv_var = 0;
	
	mdio_pinStatus(PORTD, PIN0, INPUT_FLOAT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	0e 94 71 00 	call	0xe2	; 0xe2 <mdio_pinStatus>
	mdio_pinStatus(PORTD, PIN1, OUTPUT);
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	62 e0       	ldi	r22, 0x02	; 2
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	0e 94 71 00 	call	0xe2	; 0xe2 <mdio_pinStatus>
	mdio_pinStatus(PORTD, PIN2, OUTPUT);
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	64 e0       	ldi	r22, 0x04	; 4
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	0e 94 71 00 	call	0xe2	; 0xe2 <mdio_pinStatus>
	
	muart_init(MUART_9600_BPS);
  b0:	87 e6       	ldi	r24, 0x67	; 103
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <muart_init>
		else
		{
			mdio_setPinValue(PORTD, PIN2, LOW);
		}*/
		
		muart_sendStream((u8_t*)"Nouran", 6);
  b8:	66 e0       	ldi	r22, 0x06	; 6
  ba:	80 e6       	ldi	r24, 0x60	; 96
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 fd 00 	call	0x1fa	; 0x1fa <muart_sendStream>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	83 ed       	ldi	r24, 0xD3	; 211
  c6:	90 e3       	ldi	r25, 0x30	; 48
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x36>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x40>
  d2:	00 00       	nop
		//muart_sendStream((u8_t*)"Nouran /r/n", 8);
		_delay_ms(1000);
		muart_sendByte('\r');
  d4:	8d e0       	ldi	r24, 0x0D	; 13
  d6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <muart_sendByte>
		muart_sendByte('\n');
  da:	8a e0       	ldi	r24, 0x0A	; 10
  dc:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <muart_sendByte>
  e0:	eb cf       	rjmp	.-42     	; 0xb8 <main+0x26>

000000e2 <mdio_pinStatus>:

/*This function is responsible for setting pin or pins for a dedicated port*/
void mdio_pinStatus(u8_t port, u8_t pin, u8_t pin_status) /*pin: PIN0, PIN2 | PIN3, PIN1 | PIN5 | PIN4 | PIN3*/ /*0b00111010*/
{
	/*Switching over DIO ports*/
	switch(port)
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	f9 f0       	breq	.+62     	; 0x124 <mdio_pinStatus+0x42>
  e6:	30 f0       	brcs	.+12     	; 0xf4 <mdio_pinStatus+0x12>
  e8:	82 30       	cpi	r24, 0x02	; 2
  ea:	a1 f1       	breq	.+104    	; 0x154 <mdio_pinStatus+0x72>
  ec:	83 30       	cpi	r24, 0x03	; 3
  ee:	09 f4       	brne	.+2      	; 0xf2 <mdio_pinStatus+0x10>
  f0:	49 c0       	rjmp	.+146    	; 0x184 <mdio_pinStatus+0xa2>
  f2:	08 95       	ret
	{
		/*In case of PORTA*/
		case PORTA:
			/*Switching over pin status*/
			switch(pin_status)
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	41 f0       	breq	.+16     	; 0x108 <mdio_pinStatus+0x26>
  f8:	18 f0       	brcs	.+6      	; 0x100 <mdio_pinStatus+0x1e>
  fa:	42 30       	cpi	r20, 0x02	; 2
  fc:	51 f0       	breq	.+20     	; 0x112 <mdio_pinStatus+0x30>
  fe:	08 95       	ret
			{
				/*In case of output status*/
				case OUTPUT:
					/*Setting dedicated pins in DDR register*/
					MDIO_DDRA |= pin; /*DDRA = 0b01000010, 0b01111010*/
 100:	8a b3       	in	r24, 0x1a	; 26
 102:	68 2b       	or	r22, r24
 104:	6a bb       	out	0x1a, r22	; 26
					//SET_BIT(DDRA, pin);
					break;
 106:	08 95       	ret
					
				/*In case of input status*/
				case INPUT_FLOAT:
				/*Clearing dedicated pins in DDR register*/
					MDIO_DDRA &= ~pin; /*DDRA = 0b11111111*/
 108:	8a b3       	in	r24, 0x1a	; 26
 10a:	60 95       	com	r22
 10c:	68 23       	and	r22, r24
 10e:	6a bb       	out	0x1a, r22	; 26
					break;
 110:	08 95       	ret
					
				/*In case of input pull-up status*/
				case INPUT_PULLUP:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRA &= ~pin;
 112:	8a b3       	in	r24, 0x1a	; 26
 114:	96 2f       	mov	r25, r22
 116:	90 95       	com	r25
 118:	89 23       	and	r24, r25
 11a:	8a bb       	out	0x1a, r24	; 26
					/*Setting dedicated pins in DDR register*/
					MDIO_PORTA |= pin;
 11c:	8b b3       	in	r24, 0x1b	; 27
 11e:	68 2b       	or	r22, r24
 120:	6b bb       	out	0x1b, r22	; 27
					break;
 122:	08 95       	ret
			break;
			
		/*In case of PORTB*/
		case PORTB:
			/*Switching over pin status*/
			switch(pin_status)
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	41 f0       	breq	.+16     	; 0x138 <mdio_pinStatus+0x56>
 128:	18 f0       	brcs	.+6      	; 0x130 <mdio_pinStatus+0x4e>
 12a:	42 30       	cpi	r20, 0x02	; 2
 12c:	51 f0       	breq	.+20     	; 0x142 <mdio_pinStatus+0x60>
 12e:	08 95       	ret
			{
				/*In case of output status*/
				case OUTPUT:
					/*Setting dedicated pins in DDR register*/
					MDIO_DDRB |= pin; /*DDRA = 0b01000010, 0b01111010*/
 130:	87 b3       	in	r24, 0x17	; 23
 132:	68 2b       	or	r22, r24
 134:	67 bb       	out	0x17, r22	; 23
					//SET_BIT(DDRA, pin);
					break;
 136:	08 95       	ret
					
				/*In case of input status*/
				case INPUT_FLOAT:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRB &= ~pin; /*DDRA = 0b11111111*/
 138:	87 b3       	in	r24, 0x17	; 23
 13a:	60 95       	com	r22
 13c:	68 23       	and	r22, r24
 13e:	67 bb       	out	0x17, r22	; 23
					break;
 140:	08 95       	ret
					
				/*In case of input pull-up status*/
				case INPUT_PULLUP:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRB &= ~pin;
 142:	87 b3       	in	r24, 0x17	; 23
 144:	96 2f       	mov	r25, r22
 146:	90 95       	com	r25
 148:	89 23       	and	r24, r25
 14a:	87 bb       	out	0x17, r24	; 23
					/*Setting dedicated pins in DDR register*/
					MDIO_PORTB |= pin;
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	68 2b       	or	r22, r24
 150:	68 bb       	out	0x18, r22	; 24
					break;
 152:	08 95       	ret
			break;
			
		/*In case of PORTC*/
		case PORTC:
			/*Switching over pin status*/
			switch(pin_status)
 154:	41 30       	cpi	r20, 0x01	; 1
 156:	41 f0       	breq	.+16     	; 0x168 <mdio_pinStatus+0x86>
 158:	18 f0       	brcs	.+6      	; 0x160 <mdio_pinStatus+0x7e>
 15a:	42 30       	cpi	r20, 0x02	; 2
 15c:	51 f0       	breq	.+20     	; 0x172 <mdio_pinStatus+0x90>
 15e:	08 95       	ret
			{
				/*In case of output status*/
				case OUTPUT:
					/*Setting dedicated pins in DDR register*/
					MDIO_DDRC |= pin; /*DDRA = 0b01000010, 0b01111010*/
 160:	84 b3       	in	r24, 0x14	; 20
 162:	68 2b       	or	r22, r24
 164:	64 bb       	out	0x14, r22	; 20
					//SET_BIT(DDRA, pin);
					break;
 166:	08 95       	ret
					
				/*In case of input status*/
				case INPUT_FLOAT:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRC &= ~pin; /*DDRA = 0b11111111*/
 168:	84 b3       	in	r24, 0x14	; 20
 16a:	60 95       	com	r22
 16c:	68 23       	and	r22, r24
 16e:	64 bb       	out	0x14, r22	; 20
					break;
 170:	08 95       	ret
					
				/*In case of input pull-up status*/
				case INPUT_PULLUP:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRC &= ~pin;
 172:	84 b3       	in	r24, 0x14	; 20
 174:	96 2f       	mov	r25, r22
 176:	90 95       	com	r25
 178:	89 23       	and	r24, r25
 17a:	84 bb       	out	0x14, r24	; 20
					/*Setting dedicated pins in DDR register*/
					MDIO_PORTC |= pin;
 17c:	85 b3       	in	r24, 0x15	; 21
 17e:	68 2b       	or	r22, r24
 180:	65 bb       	out	0x15, r22	; 21
					break;
 182:	08 95       	ret
			break;
			
		/*In case of PORTD*/
		case PORTD:
			/*Switching over pin status*/
			switch(pin_status)
 184:	41 30       	cpi	r20, 0x01	; 1
 186:	41 f0       	breq	.+16     	; 0x198 <mdio_pinStatus+0xb6>
 188:	18 f0       	brcs	.+6      	; 0x190 <mdio_pinStatus+0xae>
 18a:	42 30       	cpi	r20, 0x02	; 2
 18c:	51 f0       	breq	.+20     	; 0x1a2 <mdio_pinStatus+0xc0>
 18e:	08 95       	ret
			{
				/*In case of output status*/
				case OUTPUT:
					/*Setting dedicated pins in DDR register*/
					MDIO_DDRD |= pin; /*DDRA = 0b01000010, 0b01111010*/
 190:	81 b3       	in	r24, 0x11	; 17
 192:	68 2b       	or	r22, r24
 194:	61 bb       	out	0x11, r22	; 17
					//SET_BIT(DDRA, pin);
					break;
 196:	08 95       	ret
					
				/*In case of input status*/
				case INPUT_FLOAT:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRD &= ~pin; /*DDRA = 0b11111111*/
 198:	81 b3       	in	r24, 0x11	; 17
 19a:	60 95       	com	r22
 19c:	68 23       	and	r22, r24
 19e:	61 bb       	out	0x11, r22	; 17
					break;
 1a0:	08 95       	ret
					
				/*In case of input pull-up status*/
				case INPUT_PULLUP:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRD &= ~pin;
 1a2:	81 b3       	in	r24, 0x11	; 17
 1a4:	96 2f       	mov	r25, r22
 1a6:	90 95       	com	r25
 1a8:	89 23       	and	r24, r25
 1aa:	81 bb       	out	0x11, r24	; 17
					/*Setting dedicated pins in DDR register*/
					MDIO_PORTD |= pin;
 1ac:	82 b3       	in	r24, 0x12	; 18
 1ae:	68 2b       	or	r22, r24
 1b0:	62 bb       	out	0x12, r22	; 18
 1b2:	08 95       	ret

000001b4 <muart_init>:
{
	/*Checking that there is a new data or not*/
	if(GET_BIT(MUART_UCSRA, 7))
	{
		/*Reading the new data*/
		*data = MUART_UDR;
 1b4:	54 9a       	sbi	0x0a, 4	; 10
 1b6:	53 9a       	sbi	0x0a, 3	; 10
 1b8:	26 e8       	ldi	r18, 0x86	; 134
 1ba:	20 bd       	out	0x20, r18	; 32
 1bc:	89 b9       	out	0x09, r24	; 9
 1be:	90 bd       	out	0x20, r25	; 32
 1c0:	08 95       	ret

000001c2 <muart_sendByte>:
 1c2:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 1c6:	65 9b       	sbis	0x0c, 5	; 12
 1c8:	17 c0       	rjmp	.+46     	; 0x1f8 <muart_sendByte+0x36>
 1ca:	8c b9       	out	0x0c, r24	; 12
 1cc:	5e 99       	sbic	0x0b, 6	; 11
 1ce:	13 c0       	rjmp	.+38     	; 0x1f6 <muart_sendByte+0x34>
 1d0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 1d4:	8a 30       	cpi	r24, 0x0A	; 10
 1d6:	78 f4       	brcc	.+30     	; 0x1f6 <muart_sendByte+0x34>
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 1de:	8f e9       	ldi	r24, 0x9F	; 159
 1e0:	9f e0       	ldi	r25, 0x0F	; 15
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <muart_sendByte+0x20>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <muart_sendByte+0x26>
 1e8:	00 00       	nop
 1ea:	5e 99       	sbic	0x0b, 6	; 11
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <muart_sendByte+0x34>
 1ee:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 1f2:	8a 30       	cpi	r24, 0x0A	; 10
 1f4:	88 f3       	brcs	.-30     	; 0x1d8 <muart_sendByte+0x16>
 1f6:	5e 9a       	sbi	0x0b, 6	; 11
 1f8:	08 95       	ret

000001fa <muart_sendStream>:
	return;
}

/*This function is responsible for sending stream of data over UART data bus*/
void muart_sendStream(u8_t* data_stream, u8_t data_size)
{
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	ec 01       	movw	r28, r24
	/*Sending stream of data according to their size*/
	while(data_size--)
 204:	0f ef       	ldi	r16, 0xFF	; 255
 206:	06 0f       	add	r16, r22
 208:	66 23       	and	r22, r22
 20a:	59 f0       	breq	.+22     	; 0x222 <muart_sendStream+0x28>
 20c:	10 e0       	ldi	r17, 0x00	; 0
 20e:	0f 5f       	subi	r16, 0xFF	; 255
 210:	1f 4f       	sbci	r17, 0xFF	; 255
 212:	08 0f       	add	r16, r24
 214:	19 1f       	adc	r17, r25
	{
		/*Send one byte at a time*/
		muart_sendByte(*data_stream);
 216:	89 91       	ld	r24, Y+
 218:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <muart_sendByte>

/*This function is responsible for sending stream of data over UART data bus*/
void muart_sendStream(u8_t* data_stream, u8_t data_size)
{
	/*Sending stream of data according to their size*/
	while(data_size--)
 21c:	c0 17       	cp	r28, r16
 21e:	d1 07       	cpc	r29, r17
 220:	d1 f7       	brne	.-12     	; 0x216 <muart_sendStream+0x1c>
		data_stream++;
	}
	
	/*Return from this function*/
	return;
}
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	08 95       	ret

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
