
DC_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a52  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e2  00000000  00000000  00000e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000552  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000446  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000679  00000000  00000000  00001f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000025d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  64:	0c 94 2c 01 	jmp	0x258	; 0x258 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <hdc_motor_init>:
}

void hdc_motor_operate_dir2()
{
	mdio_setPinValue(PORTD, PIN0, LOW);
	mdio_setPinValue(PORTD, PIN1, HIGH);
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	61 e0       	ldi	r22, 0x01	; 1
  70:	83 e0       	ldi	r24, 0x03	; 3
  72:	0e 94 6f 00 	call	0xde	; 0xde <mdio_pinStatus>
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	62 e0       	ldi	r22, 0x02	; 2
  7a:	83 e0       	ldi	r24, 0x03	; 3
  7c:	0e 94 6f 00 	call	0xde	; 0xde <mdio_pinStatus>
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	64 e0       	ldi	r22, 0x04	; 4
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	0e 94 6f 00 	call	0xde	; 0xde <mdio_pinStatus>
  8a:	41 e0       	ldi	r20, 0x01	; 1
  8c:	64 e0       	ldi	r22, 0x04	; 4
  8e:	83 e0       	ldi	r24, 0x03	; 3
  90:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <mdio_setPinValue>
  94:	08 95       	ret

00000096 <hdc_motor_operate_dir1>:
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <mdio_setPinValue>
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <mdio_setPinValue>
  aa:	08 95       	ret

000000ac <hdc_motor_reverse>:
	return;
}

void hdc_motor_reverse()
{
	mdio_togglePinValue(PORTD, PIN0);
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	0e 94 14 01 	call	0x228	; 0x228 <mdio_togglePinValue>
	mdio_togglePinValue(PORTD, PIN1);
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	0e 94 14 01 	call	0x228	; 0x228 <mdio_togglePinValue>
  bc:	08 95       	ret

000000be <main>:
#include "util/delay.h"

int main(void)
{
	
	hdc_motor_init();
  be:	0e 94 36 00 	call	0x6c	; 0x6c <hdc_motor_init>
	hdc_motor_operate_dir1();
  c2:	0e 94 4b 00 	call	0x96	; 0x96 <hdc_motor_operate_dir1>
    {
		//hdc_motor_operate();
		
		//_delay_ms(3000);
		
		hdc_motor_reverse();
  c6:	0e 94 56 00 	call	0xac	; 0xac <hdc_motor_reverse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	83 ed       	ldi	r24, 0xD3	; 211
  ce:	90 e3       	ldi	r25, 0x30	; 48
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x12>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x1c>
  da:	00 00       	nop
  dc:	f4 cf       	rjmp	.-24     	; 0xc6 <main+0x8>

000000de <mdio_pinStatus>:

/*This function is responsible for setting pin or pins for a dedicated port*/
void mdio_pinStatus(u8_t port, u8_t pin, u8_t pin_status) /*pin: PIN0, PIN2 | PIN3, PIN1 | PIN5 | PIN4 | PIN3*/ /*0b00111010*/
{
	/*Switching over DIO ports*/
	switch(port)
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	f9 f0       	breq	.+62     	; 0x120 <mdio_pinStatus+0x42>
  e2:	30 f0       	brcs	.+12     	; 0xf0 <mdio_pinStatus+0x12>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	a1 f1       	breq	.+104    	; 0x150 <mdio_pinStatus+0x72>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	09 f4       	brne	.+2      	; 0xee <mdio_pinStatus+0x10>
  ec:	49 c0       	rjmp	.+146    	; 0x180 <mdio_pinStatus+0xa2>
  ee:	08 95       	ret
	{
		/*In case of PORTA*/
		case PORTA:
			/*Switching over pin status*/
			switch(pin_status)
  f0:	41 30       	cpi	r20, 0x01	; 1
  f2:	41 f0       	breq	.+16     	; 0x104 <mdio_pinStatus+0x26>
  f4:	18 f0       	brcs	.+6      	; 0xfc <mdio_pinStatus+0x1e>
  f6:	42 30       	cpi	r20, 0x02	; 2
  f8:	51 f0       	breq	.+20     	; 0x10e <mdio_pinStatus+0x30>
  fa:	08 95       	ret
			{
				/*In case of output status*/
				case OUTPUT:
					/*Setting dedicated pins in DDR register*/
					MDIO_DDRA |= pin; /*DDRA = 0b01000010, 0b01111010*/
  fc:	8a b3       	in	r24, 0x1a	; 26
  fe:	68 2b       	or	r22, r24
 100:	6a bb       	out	0x1a, r22	; 26
					//SET_BIT(DDRA, pin);
					break;
 102:	08 95       	ret
					
				/*In case of input status*/
				case INPUT_FLOAT:
				/*Clearing dedicated pins in DDR register*/
					MDIO_DDRA &= ~pin; /*DDRA = 0b11111111*/
 104:	8a b3       	in	r24, 0x1a	; 26
 106:	60 95       	com	r22
 108:	68 23       	and	r22, r24
 10a:	6a bb       	out	0x1a, r22	; 26
					break;
 10c:	08 95       	ret
					
				/*In case of input pull-up status*/
				case INPUT_PULLUP:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRA &= ~pin;
 10e:	8a b3       	in	r24, 0x1a	; 26
 110:	96 2f       	mov	r25, r22
 112:	90 95       	com	r25
 114:	89 23       	and	r24, r25
 116:	8a bb       	out	0x1a, r24	; 26
					/*Setting dedicated pins in DDR register*/
					MDIO_PORTA |= pin;
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	68 2b       	or	r22, r24
 11c:	6b bb       	out	0x1b, r22	; 27
					break;
 11e:	08 95       	ret
			break;
			
		/*In case of PORTB*/
		case PORTB:
			/*Switching over pin status*/
			switch(pin_status)
 120:	41 30       	cpi	r20, 0x01	; 1
 122:	41 f0       	breq	.+16     	; 0x134 <mdio_pinStatus+0x56>
 124:	18 f0       	brcs	.+6      	; 0x12c <mdio_pinStatus+0x4e>
 126:	42 30       	cpi	r20, 0x02	; 2
 128:	51 f0       	breq	.+20     	; 0x13e <mdio_pinStatus+0x60>
 12a:	08 95       	ret
			{
				/*In case of output status*/
				case OUTPUT:
					/*Setting dedicated pins in DDR register*/
					MDIO_DDRB |= pin; /*DDRA = 0b01000010, 0b01111010*/
 12c:	87 b3       	in	r24, 0x17	; 23
 12e:	68 2b       	or	r22, r24
 130:	67 bb       	out	0x17, r22	; 23
					//SET_BIT(DDRA, pin);
					break;
 132:	08 95       	ret
					
				/*In case of input status*/
				case INPUT_FLOAT:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRB &= ~pin; /*DDRA = 0b11111111*/
 134:	87 b3       	in	r24, 0x17	; 23
 136:	60 95       	com	r22
 138:	68 23       	and	r22, r24
 13a:	67 bb       	out	0x17, r22	; 23
					break;
 13c:	08 95       	ret
					
				/*In case of input pull-up status*/
				case INPUT_PULLUP:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRB &= ~pin;
 13e:	87 b3       	in	r24, 0x17	; 23
 140:	96 2f       	mov	r25, r22
 142:	90 95       	com	r25
 144:	89 23       	and	r24, r25
 146:	87 bb       	out	0x17, r24	; 23
					/*Setting dedicated pins in DDR register*/
					MDIO_PORTB |= pin;
 148:	88 b3       	in	r24, 0x18	; 24
 14a:	68 2b       	or	r22, r24
 14c:	68 bb       	out	0x18, r22	; 24
					break;
 14e:	08 95       	ret
			break;
			
		/*In case of PORTC*/
		case PORTC:
			/*Switching over pin status*/
			switch(pin_status)
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	41 f0       	breq	.+16     	; 0x164 <mdio_pinStatus+0x86>
 154:	18 f0       	brcs	.+6      	; 0x15c <mdio_pinStatus+0x7e>
 156:	42 30       	cpi	r20, 0x02	; 2
 158:	51 f0       	breq	.+20     	; 0x16e <mdio_pinStatus+0x90>
 15a:	08 95       	ret
			{
				/*In case of output status*/
				case OUTPUT:
					/*Setting dedicated pins in DDR register*/
					MDIO_DDRC |= pin; /*DDRA = 0b01000010, 0b01111010*/
 15c:	84 b3       	in	r24, 0x14	; 20
 15e:	68 2b       	or	r22, r24
 160:	64 bb       	out	0x14, r22	; 20
					//SET_BIT(DDRA, pin);
					break;
 162:	08 95       	ret
					
				/*In case of input status*/
				case INPUT_FLOAT:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRC &= ~pin; /*DDRA = 0b11111111*/
 164:	84 b3       	in	r24, 0x14	; 20
 166:	60 95       	com	r22
 168:	68 23       	and	r22, r24
 16a:	64 bb       	out	0x14, r22	; 20
					break;
 16c:	08 95       	ret
					
				/*In case of input pull-up status*/
				case INPUT_PULLUP:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRC &= ~pin;
 16e:	84 b3       	in	r24, 0x14	; 20
 170:	96 2f       	mov	r25, r22
 172:	90 95       	com	r25
 174:	89 23       	and	r24, r25
 176:	84 bb       	out	0x14, r24	; 20
					/*Setting dedicated pins in DDR register*/
					MDIO_PORTC |= pin;
 178:	85 b3       	in	r24, 0x15	; 21
 17a:	68 2b       	or	r22, r24
 17c:	65 bb       	out	0x15, r22	; 21
					break;
 17e:	08 95       	ret
			break;
			
		/*In case of PORTD*/
		case PORTD:
			/*Switching over pin status*/
			switch(pin_status)
 180:	41 30       	cpi	r20, 0x01	; 1
 182:	41 f0       	breq	.+16     	; 0x194 <mdio_pinStatus+0xb6>
 184:	18 f0       	brcs	.+6      	; 0x18c <mdio_pinStatus+0xae>
 186:	42 30       	cpi	r20, 0x02	; 2
 188:	51 f0       	breq	.+20     	; 0x19e <mdio_pinStatus+0xc0>
 18a:	08 95       	ret
			{
				/*In case of output status*/
				case OUTPUT:
					/*Setting dedicated pins in DDR register*/
					MDIO_DDRD |= pin; /*DDRA = 0b01000010, 0b01111010*/
 18c:	81 b3       	in	r24, 0x11	; 17
 18e:	68 2b       	or	r22, r24
 190:	61 bb       	out	0x11, r22	; 17
					//SET_BIT(DDRA, pin);
					break;
 192:	08 95       	ret
					
				/*In case of input status*/
				case INPUT_FLOAT:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRD &= ~pin; /*DDRA = 0b11111111*/
 194:	81 b3       	in	r24, 0x11	; 17
 196:	60 95       	com	r22
 198:	68 23       	and	r22, r24
 19a:	61 bb       	out	0x11, r22	; 17
					break;
 19c:	08 95       	ret
					
				/*In case of input pull-up status*/
				case INPUT_PULLUP:
					/*Clearing dedicated pins in DDR register*/
					MDIO_DDRD &= ~pin;
 19e:	81 b3       	in	r24, 0x11	; 17
 1a0:	96 2f       	mov	r25, r22
 1a2:	90 95       	com	r25
 1a4:	89 23       	and	r24, r25
 1a6:	81 bb       	out	0x11, r24	; 17
					/*Setting dedicated pins in DDR register*/
					MDIO_PORTD |= pin;
 1a8:	82 b3       	in	r24, 0x12	; 18
 1aa:	68 2b       	or	r22, r24
 1ac:	62 bb       	out	0x12, r22	; 18
 1ae:	08 95       	ret

000001b0 <mdio_setPinValue>:

/*This function is responsible for setting a dedicated value for a pin or pins*/
void mdio_setPinValue(u8_t port, u8_t pin, u8_t pin_value)
{
	/*Switching over DIO ports*/
	switch(port)
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	99 f0       	breq	.+38     	; 0x1da <mdio_setPinValue+0x2a>
 1b4:	28 f0       	brcs	.+10     	; 0x1c0 <mdio_setPinValue+0x10>
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	e9 f0       	breq	.+58     	; 0x1f4 <mdio_setPinValue+0x44>
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	41 f1       	breq	.+80     	; 0x20e <mdio_setPinValue+0x5e>
 1be:	08 95       	ret
	{
		/*In case of PORTA*/
		case PORTA:
			/*Switching over pin value*/
			switch(pin_value)
 1c0:	44 23       	and	r20, r20
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <mdio_setPinValue+0x20>
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	79 f5       	brne	.+94     	; 0x226 <mdio_setPinValue+0x76>
			{
				/*In case of HIGH value*/
				case HIGH:
					/*Setting dedicated pins in PORT register*/
					MDIO_PORTA |= pin; 
 1c8:	8b b3       	in	r24, 0x1b	; 27
 1ca:	68 2b       	or	r22, r24
 1cc:	6b bb       	out	0x1b, r22	; 27
					break;
 1ce:	08 95       	ret
					
				/*In case of LOW value*/
				case LOW:
					/*Clearing dedicated pins in PORT register*/
					MDIO_PORTA &= ~pin; 
 1d0:	8b b3       	in	r24, 0x1b	; 27
 1d2:	60 95       	com	r22
 1d4:	68 23       	and	r22, r24
 1d6:	6b bb       	out	0x1b, r22	; 27
					break;
 1d8:	08 95       	ret
			break;
			
		/*In case of PORTB*/
		case PORTB:
			/*Switching over pin value*/
			switch(pin_value)
 1da:	44 23       	and	r20, r20
 1dc:	31 f0       	breq	.+12     	; 0x1ea <mdio_setPinValue+0x3a>
 1de:	41 30       	cpi	r20, 0x01	; 1
 1e0:	11 f5       	brne	.+68     	; 0x226 <mdio_setPinValue+0x76>
			{
				/*In case of HIGH value*/
				case HIGH:
					/*Setting dedicated pins in PORT register*/
					MDIO_PORTB |= pin; 
 1e2:	88 b3       	in	r24, 0x18	; 24
 1e4:	68 2b       	or	r22, r24
 1e6:	68 bb       	out	0x18, r22	; 24
					break;
 1e8:	08 95       	ret
					
				/*In case of LOW value*/
				case LOW:
					/*Clearing dedicated pins in PORT register*/
					MDIO_PORTB &= ~pin; 
 1ea:	88 b3       	in	r24, 0x18	; 24
 1ec:	60 95       	com	r22
 1ee:	68 23       	and	r22, r24
 1f0:	68 bb       	out	0x18, r22	; 24
					break;
 1f2:	08 95       	ret
			break;
			
		/*In case of PORTC*/
		case PORTC:
			/*Switching over pin value*/
			switch(pin_value)
 1f4:	44 23       	and	r20, r20
 1f6:	31 f0       	breq	.+12     	; 0x204 <mdio_setPinValue+0x54>
 1f8:	41 30       	cpi	r20, 0x01	; 1
 1fa:	a9 f4       	brne	.+42     	; 0x226 <mdio_setPinValue+0x76>
			{
				/*In case of HIGH value*/
				case HIGH:
					/*Setting dedicated pins in PORT register*/
					MDIO_PORTC |= pin; 
 1fc:	85 b3       	in	r24, 0x15	; 21
 1fe:	68 2b       	or	r22, r24
 200:	65 bb       	out	0x15, r22	; 21
					break;
 202:	08 95       	ret
					
				/*In case of LOW value*/
				case LOW:
					/*Clearing dedicated pins in PORT register*/
					MDIO_PORTC &= ~pin; 
 204:	85 b3       	in	r24, 0x15	; 21
 206:	60 95       	com	r22
 208:	68 23       	and	r22, r24
 20a:	65 bb       	out	0x15, r22	; 21
					break;
 20c:	08 95       	ret
			break;
			
		/*In case of PORTD*/
		case PORTD:
			/*Switching over pin value*/
			switch(pin_value)
 20e:	44 23       	and	r20, r20
 210:	31 f0       	breq	.+12     	; 0x21e <mdio_setPinValue+0x6e>
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	41 f4       	brne	.+16     	; 0x226 <mdio_setPinValue+0x76>
			{
				/*In case of HIGH value*/
				case HIGH:
					/*Setting dedicated pins in PORT register*/
					MDIO_PORTD |= pin; 
 216:	82 b3       	in	r24, 0x12	; 18
 218:	68 2b       	or	r22, r24
 21a:	62 bb       	out	0x12, r22	; 18
					break;
 21c:	08 95       	ret
					
				/*In case of LOW value*/
				case LOW:
				/*Clearing dedicated pins in PORT register*/
					MDIO_PORTD &= ~pin; 
 21e:	82 b3       	in	r24, 0x12	; 18
 220:	60 95       	com	r22
 222:	68 23       	and	r22, r24
 224:	62 bb       	out	0x12, r22	; 18
 226:	08 95       	ret

00000228 <mdio_togglePinValue>:
}

void mdio_togglePinValue(u8_t port, u8_t pin)
{
	/*Switching over DIO ports*/
	switch(port)
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	51 f0       	breq	.+20     	; 0x240 <mdio_togglePinValue+0x18>
 22c:	28 f0       	brcs	.+10     	; 0x238 <mdio_togglePinValue+0x10>
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	59 f0       	breq	.+22     	; 0x248 <mdio_togglePinValue+0x20>
 232:	83 30       	cpi	r24, 0x03	; 3
 234:	69 f0       	breq	.+26     	; 0x250 <mdio_togglePinValue+0x28>
 236:	08 95       	ret
	{
		/*In case of PORTA*/
		case PORTA:
			/*Toggling dedicated pins values*/
			MDIO_PORTA ^= pin;
 238:	8b b3       	in	r24, 0x1b	; 27
 23a:	68 27       	eor	r22, r24
 23c:	6b bb       	out	0x1b, r22	; 27
			break;
 23e:	08 95       	ret
			
		/*In case of PORTB*/
		case PORTB:
			/*Toggling dedicated pins values*/
			MDIO_PORTB ^= pin;
 240:	88 b3       	in	r24, 0x18	; 24
 242:	68 27       	eor	r22, r24
 244:	68 bb       	out	0x18, r22	; 24
			break;
 246:	08 95       	ret
			
		/*In case of PORTC*/
		case PORTC:
			/*Toggling dedicated pins values*/
			MDIO_PORTC ^= pin;
 248:	85 b3       	in	r24, 0x15	; 21
 24a:	68 27       	eor	r22, r24
 24c:	65 bb       	out	0x15, r22	; 21
			break;
 24e:	08 95       	ret
			
		/*In case of PORTD*/
		case PORTD:
			/*Toggling dedicated pins values*/
			MDIO_PORTD ^= pin;
 250:	82 b3       	in	r24, 0x12	; 18
 252:	68 27       	eor	r22, r24
 254:	62 bb       	out	0x12, r22	; 18
 256:	08 95       	ret

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
